name: merge_master_to_release
on:
  workflow_dispatch:
    inputs:
      release_name:
        # release branch name as per standards, for example - release-2020.10.0
        description: 'release branch name as per standards, for example - release-2023.01.0'
        required: true
        
      repo_names:
        # add the repos with space separated, for example - 'db-test-foundation-releases db-test-aws'
        description: 'List of repositories to create the release branch in'
        required: true
        default: 'Smart-ENSM'
      confirm_choice:
        # confirm choice
        description: 'confirm your choice to merge'
        required: true
        default: 'yes'

jobs:
  merge_master_to_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          #!/bin/bash

          # Exit immediately, if there are any errors, so that bamboo plan should return a non-zero error code
          # Look out for some unexpected outcomes, as the script might exit in an if or a for statement where
          # the exit is not required
          # if [ "$DEBUG" == "true" ]; then
          #   set -x
          # fi
          WORK_DIR="$(pwd)"
          export WORK_DIR

          # # Export environment variables defined in variables.sh
          # echo 'Exporting variables...'
          # # shellcheck disable=SC1091
          # . "${WORK_DIR}"/bamboo-specs/scripts/variables.sh

          LIST="${{ github.event.inputs.repo_names }}"
          #GITURL="https://${{secrets.WORKFLOW_GITHUB_TOKEN}}@github.com/AbdouMancer/"
          #GITURL="https://github.com/AbdouMancer/"
          GITURL="git@github.com:AbdouMancer"
          RELEASE_BRANCH=${{ github.event.inputs.release_name }}
          MASTER_BRANCH="master"
          CONFIRM_CHOICE=${{ github.event.inputs.confirm_choice }}
          
          if [[ -z ${CONFIRM_CHOICE} ]]; then
            echo "CONFIRM_CHOICE variable is empty, please use \"Run customized...\" option with CONFIRM variable containing any value diff than empty string"
            exit 1
          fi

          if [[ -z "${RELEASE_BRANCH}" ]]; then
            echo "RELEASE_BRANCH variable is empty, please use \"Run customized...\" option and use proper value (release-202x.xx.x) for RELEASE_BRANCH variable"
            exit 1
          fi

          if [[ ! "${RELEASE_BRANCH}" =~ ^release-[0-9]{4}\.[0-9]{1,2}\.[0-9]{1,2}$ ]]; then
            echo "RELEASE_BRANCH values does not match release branch name standards, for example: release-2020.10.0"
            exit 1
          fi

          sleep 5

          echo "Start"

          currentDirectory="${WORK_DIR}"
          echo "Current Working Directory - ${currentDirectory}"

          VERSION=$(echo "${RELEASE_BRANCH}" | awk -F"release-" '{print $2}')

          git config --global user.email "ea_mancer@esi.dz"
          git config --global user.name "AbdouMancer"
          git config --global credential.helper cache

          for repo in ${LIST}; do
              cd "${currentDirectory}" || { echo "Can not access to ${currentDirectory}"; }
              if [[ ! -d "${repo}" ]]; then
                git clone "${GITURL}"/"${repo}" || exit 1
              fi
              cd "${currentDirectory}"/"${repo}" || { echo "Can not access to ${currentDirectory}/${repo}"; }
              git fetch

              git checkout "${MASTER_BRANCH}"
              git pull origin "${MASTER_BRANCH}"

              git checkout "${RELEASE_BRANCH}"
              git pull origin "${RELEASE_BRANCH}"

              #if [[ $(git rev-parse "${RELEASE_BRANCH}") ==  $(git merge-base "${RELEASE_BRANCH}" "${MASTER_BRANCH}") ]]; then
              #  echo "Release branch ${RELEASE_BRANCH} have been already merged earlier to ${MASTER_BRANCH}, skipping"
              #  continue;
              #fi

              if [[ $(git rev-parse "${MASTER_BRANCH}") ==  $(git merge-base "${RELEASE_BRANCH}" "${MASTER_BRANCH}") ]]; then
                echo "Branch ${MASTER_BRANCH} have been already merged earlier to release branch ${RELEASE_BRANCH}, skipping"
                continue;
              fi

              # merge master branch to release branch
              if ! git merge "${MASTER_BRANCH}"; then
                echo "ERROR merging repo: ${repo}. Aborting merge..."
                git merge --abort
                continue
              fi
              git push --set-upstream origin "${RELEASE_BRANCH}"              
          done

          exit 0
