name: merge_master_to_develop
on:
  workflow_dispatch:
    inputs:
      develop_name:
        # develop branch name
        description: 'develop branch name'
        required: true
        
      repo_names:
        # add the repos with space separated, for example - 'db-test-foundation-releases db-test-aws'
        description: 'List of repositories to merge from master to develop'
        required: true
        default: ''

jobs:
  merge_master_to_develop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          #!/bin/bash

          # Exit immediately, if there are any errors, so that bamboo plan should return a non-zero error code
          # Look out for some unexpected outcomes, as the script might exit in an if or a for statement where
          # the exit is not required
          # if [ "$DEBUG" == "true" ]; then
          #   set -x
          # fi
          WORK_DIR="$(pwd)"
          export WORK_DIR

          # # Export environment variables defined in variables.sh
          # echo 'Exporting variables...'
          # # shellcheck disable=SC1091
          # . "${WORK_DIR}"/bamboo-specs/scripts/variables.sh
          
          which mvn

          LIST="${{ github.event.inputs.repo_names }}"
          GITURL="https://${{secrets.WORKFLOW_GITHUB_TOKEN}}@github.com/AbdouMancer/"
          DEVELOP_BRANCH=${{ github.event.inputs.develop_name }}
          MASTER_BRANCH="master"

          if [[ -z ${DEVELOP_BRANCH} ]]; then
            echo "DEVELOP_BRANCH variable is empty, please use \"Run customized...\" option and use proper value for DEVELOP_BRANCH variable"
            exit 1
          fi

          sleep 5

          echo "Start"

          currentDirectory="${WORK_DIR}"
          echo "Current Working Directory - ${currentDirectory}"

          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git config --global credential.helper cache

          for repo in ${LIST}; do
              cd "${currentDirectory}" || { echo "Can not access to ${currentDirectory}"; }
              if [[ ! -d ${repo} ]]; then
                git clone "${GITURL}"/"${repo}" || exit 1
              fi
              cd "${currentDirectory}"/"${repo}" || { echo "Can not access to ${currentDirectory}/${repo}"; }
              
              git fetch

              git checkout "${MASTER_BRANCH}"
              git pull origin "${MASTER_BRANCH}"

              git checkout "${DEVELOP_BRANCH}"
              git pull origin "${DEVELOP_BRANCH}"

              # merge master branch to develop
              if ! git merge "${MASTER_BRANCH}"; then
                echo "ERROR merging repo: ${repo}. Aborting merge..."
                git merge --abort
                failing_repo_list+=(${repo})
                continue
              fi
              git push --set-upstream origin "${DEVELOP_BRANCH}"
              
              if [[ "${repo}" == 'db-dxp-cms' ]]; then
                REVISION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
                echo -e "REVISION: ${REVISION}\n"
                if [[ "${REVISION}" =~ ^null.*$ ]]; then
                  echo "Changing POM version for Magnolia to 1.0.0-SNAPSHOT"
                  mvn versions:set -DnewVersion="1.0.0-SNAPSHOT" -DgenerateBackupPoms=false
                else
                  echo "Changing POM revision for Magnolia to 1.0.0-SNAPSHOT"
                  mvn versions:set-property -Dproperty=revision -DnewVersion="1.0.0-SNAPSHOT" -q -DgenerateBackupPoms=false
                fi
                git diff
                git commit -am "pom version update to 1.0.0-SNAPSHOT" && git push --set-upstream origin "${DEVELOP_BRANCH}"
              fi
              
          done

          exit 0
